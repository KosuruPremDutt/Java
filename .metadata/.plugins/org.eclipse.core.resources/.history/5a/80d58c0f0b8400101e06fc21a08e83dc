package com.wipro.controller;

import com.wipro.Entities.Appointment;
import com.wipro.Entities.Doctor;
import com.wipro.repository.AppointmentRepository;
import com.wipro.repository.DoctorRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/appointments")
public class AppointmentController {

    @Autowired
    private AppointmentRepository appointmentRepo;

    @Autowired
    private DoctorRepository doctorRepo;

    // Get all appointments
    @GetMapping
    public List<Appointment> getAllAppointments() {
        return appointmentRepo.findAll();
    }

    // Add new appointment
    @PostMapping
    public ResponseEntity<?> addAppointment(@RequestBody AppointmentDTO appointmentDTO) {
        if (appointmentDTO.getDoctorId() == null) {
            return ResponseEntity.badRequest().body("Doctor ID must not be null");
        }

        // Find doctor by ID or return error
        Doctor doctor = doctorRepo.findById(appointmentDTO.getDoctorId())
                .orElse(null);

        if (doctor == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body("Doctor not found with ID: " + appointmentDTO.getDoctorId());
        }

        // Parse date and time to LocalDateTime with custom formatter for date
        LocalDateTime appointmentTime;
        try {
            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
            LocalDate date = LocalDate.parse(appointmentDTO.getDate(), dateFormatter);
            LocalTime time = LocalTime.parse(appointmentDTO.getTime());  // expects HH:mm or HH:mm:ss
            appointmentTime = LocalDateTime.of(date, time);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Invalid date/time format");
        }

        // Create new appointment
        Appointment appointment = new Appointment();
        appointment.setDoctor(doctor);
        appointment.setPatientName(appointmentDTO.getPatientName());
        appointment.setAppointmentTime(appointmentTime);
        appointment.setContact(appointmentDTO.getContact());

        // Save and return the appointment
        Appointment savedAppointment = appointmentRepo.save(appointment);
        return ResponseEntity.status(HttpStatus.CREATED).body(savedAppointment);
    }

    // DTO class for receiving appointment data
    static class AppointmentDTO {
        private Long doctorId;
        private String patientName;
        private String date;   // Format: dd-MM-yyyy
        private String time;   // Format: HH:mm or HH:mm:ss
        private String contact;

        // Getters and setters
        public Long getDoctorId() {
            return doctorId;
        }

        public void setDoctorId(Long doctorId) {
            this.doctorId = doctorId;
        }

        public String getPatientName() {
            return patientName;
        }

        public void setPatientName(String patientName) {
            this.patientName = patientName;
        }

        public String getDate() {
            return date;
        }

        public void setDate(String date) {
            this.date = date;
        }

        public String getTime() {
            return time;
        }

        public void setTime(String time) {
            this.time = time;
        }

        public String getContact() {
            return contact;
        }

        public void setContact(String contact) {
            this.contact = contact;
        }
    }
}
